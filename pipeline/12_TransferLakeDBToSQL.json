{
	"name": "12_TransferLakeDBToSQL",
	"properties": {
		"activities": [
			{
				"name": "Read Source Schema",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT [SchemaInput],[TableInput],\n[SchemaOutput],[TableOutput], [MergeProcedure]\nFROM [cfg].[RawParquet]\nwhere Pipeline = '12_TransferLakeDBToSQL' and FlagEnabled = 1 order by [JobOrder]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "fat_d_sql",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Read Source Schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Read Source Schema').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "LakeToSql",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Read Watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT * FROM ',string(item().SchemaInput),'.',string(item().TableInput),' WHERE LEFT([LastModified],10)  = LEFT(''', activity('Read Watermark').output.value[0].LastModified,'''',',10)' )",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "@{CONCAT('TRUNCATE TABLE ', string(item().SchemaOutput), '.', string(item().TableOutput))}",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "LakeDatabase",
									"type": "DatasetReference",
									"parameters": {
										"TableLake": {
											"value": "@item().TableInput",
											"type": "Expression"
										},
										"SchemaLake": "@item().SchemaInput"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "SqlDatabse",
									"type": "DatasetReference",
									"parameters": {
										"TableSql": {
											"value": "@item().TableOutput",
											"type": "Expression"
										},
										"SchemaSql": "@item().SchemaOutput"
									}
								}
							]
						},
						{
							"name": "Read Watermark",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT * FROM [fat_delta].[dbo].[watermark] WHERE TableName = ''',item().TableInput,'''')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "LakeDatabase",
									"type": "DatasetReference",
									"parameters": {
										"TableLake": "watermark",
										"SchemaLake": "dbo"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "LakeToSql",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(item().MergeProcedure,null)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Stored procedureMerge",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": {
												"value": "@item().MergeProcedure",
												"type": "Expression"
											}
										},
										"linkedServiceName": {
											"referenceName": "fat_sql",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Update TipoContratto",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[pfd].[spUpdateTipoContratto]"
				},
				"linkedServiceName": {
					"referenceName": "fat_sql",
					"type": "LinkedServiceReference"
				}
			}
		],
		"folder": {
			"name": "Ingestion"
		},
		"annotations": [],
		"lastPublishTime": "2023-12-18T11:35:42Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}