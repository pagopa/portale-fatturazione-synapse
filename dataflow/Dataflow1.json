{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fat_d_sql",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "JsonToSAP",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "parse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {JSON_F52E2B61-18A1-11d1-B105-00805F49916B} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: true,",
				"     waterMarkColumn: 'Test1',",
				"     isolationLevel: 'NONE',",
				"     procedureName: 'GenerateJsonSAP',",
				"     schemaName: 'pfd',",
				"     resultSet: true,",
				"     format: 'procedure') ~> source1",
				"source1 derive({JSON_F52E2B61-18A1-11d1-B105-00805F49916B} = toString(byName('JSON_F52E2B61-18A1-11d1-B105-00805F49916B'))) ~> MapDrifted2",
				"MapDrifted2 parse(JSON = {JSON_F52E2B61-18A1-11d1-B105-00805F49916B} ? (listaFatture as (fattura as (numero as integer,",
				"     dataFattura as string,",
				"     prodotto as string,",
				"     identificativo as string,",
				"     tipologiaFattura as string,",
				"     istitutioID as string,",
				"     onboardingTokenID as string,",
				"     tipoDocumento as string,",
				"     divisa as string,",
				"     metodoPagamento as string,",
				"     causale as string,",
				"     split as boolean,",
				"     sollecito as string,",
				"     datiGeneraliDocumento as (tipologia as string,",
				"     riferimentoNumeroLinea as integer,",
				"     idDocumento as string,",
				"     data as string,",
				"     numItem as string,",
				"     codiceCommessaConvenzione as string,",
				"     CUP as string,",
				"     CIG as string)[],",
				"     posizioni as string))[]),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"parse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          listaFatture as (fattura as (numero as integer, dataFattura as string, prodotto as string, identificativo as string, tipologiaFattura as string, istitutioID as string, onboardingTokenID as string, tipoDocumento as string, divisa as string, metodoPagamento as string, causale as string, split as boolean, sollecito as string, datiGeneraliDocumento as (tipologia as string, riferimentoNumeroLinea as integer, idDocumento as string, data as string, numItem as string, codiceCommessaConvenzione as string, CUP as string, CIG as string)[], posizioni as (numerolinea as integer, testo as string, codiceMateriale as string, quantita as integer, prezzoUnitario as double, imponibile as double)[]))[]",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          JSON",
				"     )) ~> sink1"
			]
		}
	}
}