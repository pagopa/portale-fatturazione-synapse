{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fat_d_sql",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "JsonToSAP",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				}
			],
			"scriptLines": [
				"source(output(",
				"          FolderInput as string,",
				"          FolderOutput as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: '\\nSELECT [IdFattura],[DataFattura],[FkProdotto],[IdentificativoFattura],[FkTipologiaFattura],[FkIdEnte],[CodiceContratto],[FkIdTipoDocumento],[Divisa]\\n       ,[MetodoPagamento],[CausaleFattura],[SplitPayment],[Sollecito]\\n\\n       , (\\n                                             SELECT NULL AS \\'datiGeneraliDocumento.tipologia?\\',[Progressivo] AS \\'datiGeneraliDocumento.Progressivo\\',[IdDocumento] as \\'datiGeneraliDocumento.IdDocumento\\',[DataDocumento] as \\'datiGeneraliDocumento.DataDocumento\\',[NumItem] as \\'datiGeneraliDocumento.NumItem\\',[CodCommessa] as \\'datiGeneraliDocumento.CodCommessa\\',[Cup] as \\'datiGeneraliDocumento.Cup\\',[Cig] as \\'datiGeneraliDocumento.Cig\\'\\n                                             FROM [pfd].[FattureTestata] T1\\n                                             WHERE T1.IdFattura = T.IdFattura\\n                                             FOR JSON PATH\\n                                        ) AS datiGeneraliDocumento\\n\\n       ,\\'posizioni\\' = (\\n                              SELECT [NumeroLinea],[Testo],[CodiceMateriale],[Quantita],[PrezzoUnitario],[Imponibile]\\n                              FROM [pfd].[FattureRighe] R\\n                              WHERE R.FkIdFattura = T.IdFattura\\n                              FOR JSON PATH ,ROOT(\\'posizioni\\')\\n                          )\\n\\nFROM [pfd].[FattureTestata] T\\n\\nGROUP BY [IdFattura],[DataFattura],[FkProdotto],[IdentificativoFattura],[FkTipologiaFattura],[FkIdEnte],[CodiceContratto],[FkIdTipoDocumento],[Divisa]\\n          ,[MetodoPagamento],[CausaleFattura],[SplitPayment],[Sollecito]',",
				"     format: 'query') ~> source1",
				"source1 derive(IdFattura = toLong(byName('IdFattura')),",
				"          DataFattura = toTimestamp(byName('DataFattura')),",
				"          FkProdotto = toString(byName('FkProdotto')),",
				"          IdentificativoFattura = toString(byName('IdentificativoFattura')),",
				"          FkTipologiaFattura = toString(byName('FkTipologiaFattura')),",
				"          FkIdEnte = toString(byName('FkIdEnte')),",
				"          CodiceContratto = toString(byName('CodiceContratto')),",
				"          FkIdTipoDocumento = toString(byName('FkIdTipoDocumento')),",
				"          Divisa = toString(byName('Divisa')),",
				"          MetodoPagamento = toString(byName('MetodoPagamento')),",
				"          CausaleFattura = toString(byName('CausaleFattura')),",
				"          SplitPayment = toBoolean(byName('SplitPayment')),",
				"          Sollecito = toString(byName('Sollecito')),",
				"          datiGeneraliDocumento = toString(byName('datiGeneraliDocumento')),",
				"          posizioni = toString(byName('posizioni'))) ~> MapDrifted1",
				"MapDrifted1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}