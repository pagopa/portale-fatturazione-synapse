{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fat_d_sql",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "JsonToSapStorage_NEW",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "parse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          listaFatture as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     waterMarkColumn: 'Test1',",
				"     isolationLevel: 'NONE',",
				"     query: 'SELECT\\n        listaFatture = (\\n\\n    SELECT\\n        FT.IdFattura AS \\'fattura.numero\\',\\n        CONVERT(VARCHAR, FT.DataFattura, 23) AS \\'fattura.dataFattura\\',\\n        FT.FkProdotto AS \\'fattura.prodotto\\',\\n        CAST(FT.MeseRiferimento as varchar(2)) + \\'/\\' + CAST(FT.AnnoRiferimento as VARCHAR(4)) AS \\'fattura.identificativo\\',\\n        FT.FkTipologiaFattura AS \\'fattura.tipologiaFattura\\', -- Changed this line\\n        FT.FkIdEnte AS \\'fattura.istitutioID\\',\\n        FT.CodiceContratto AS \\'fattura.onboardingTokenID\\',\\n        FT.FkIdTipoDocumento AS \\'fattura.tipoDocumento\\',\\n        FT.Divisa AS \\'fattura.divisa\\',\\n        FT.MetodoPagamento AS \\'fattura.metodoPagamento\\',\\n        FT.CausaleFattura AS \\'fattura.causale\\',\\n        FT.SplitPayment AS \\'fattura.split\\',\\n        ISNULL(FT.Sollecito, \\'\\') AS \\'fattura.sollecito\\',\\n        (\\n            SELECT\\n                tC.[Descrizione] AS \\'tipologia\\', -- Changed this line\\n                FTn.Progressivo AS \\'riferimentoNumeroLinea\\',\\n                FTn.IdDocumento AS \\'idDocumento\\',\\n                CONVERT(VARCHAR,FTn.DataDocumento, 23) AS \\'data\\',\\n                FTn.NumItem AS \\'numItem\\',\\n                FTn.CodCommessa AS \\'codiceCommessaConvenzione\\',\\n                FTn.Cup AS \\'CUP\\',\\n                FTn.Cig AS \\'CIG\\'\\n            FROM [pfd].[FattureTestata] FTn\\n            JOIN [pfw].[DatiFatturazione] dF ON FTn.FkIdDatiFatturazione = dF.IdDatiFatturazione\\n            JOIN [pfw].[TipoCommessa] tC ON dF.[FkTipoCommessa] = tC.[TipoCommessa]\\n               where FTn.IdFattura = FT.IdFattura\\n            FOR JSON PATH\\n        ) AS \\'fattura.datiGeneraliDocumento\\',\\n        (\\n            SELECT\\n                FR.NumeroLinea AS \\'numerolinea\\',\\n                FR.Testo AS \\'testo\\',\\n                FR.CodiceMateriale AS \\'codiceMateriale\\',\\n                FR.Quantita AS \\'quantita\\',\\n                FR.PrezzoUnitario AS \\'prezzoUnitario\\',\\n                FR.Imponibile AS \\'imponibile\\'\\n            FROM [pfd].[FattureRighe] FR\\n            WHERE FT.IdFattura = FR.FkIdFattura\\n            FOR JSON PATH\\n        ) AS \\'fattura.posizioni\\'\\n    FROM\\n        [pfd].[FattureTestata] FT\\n    JOIN [pfw].[DatiFatturazione] dF ON FT.FkIdDatiFatturazione = dF.IdDatiFatturazione\\n    \\n\\n    FOR JSON PATH, INCLUDE_NULL_VALUES )',",
				"     format: 'query',",
				"     mode: 'read') ~> source1",
				"source1 derive(listaFatture = toString(listaFatture)) ~> MapDrifted2",
				"MapDrifted2 parse(listaFatture = listaFatture ? (fattura as (numero as integer,",
				"     dataFattura as string,",
				"     prodotto as string,",
				"     identificativo as string,",
				"     tipologiaFattura as string,",
				"     istitutioID as string,",
				"     onboardingTokenID as string,",
				"     tipoDocumento as string,",
				"     divisa as string,",
				"     metodoPagamento as string,",
				"     causale as string,",
				"     split as boolean,",
				"     sollecito as string,",
				"     datiGeneraliDocumento as (tipologia as string,",
				"     riferimentoNumeroLinea as integer,",
				"     idDocumento as string,",
				"     data as string,",
				"     numItem as string,",
				"     codiceCommessaConvenzione as string,",
				"     CUP as string,",
				"     CIG as string)[],",
				"     posizioni as (numerolinea as string,",
				"     testo as string,",
				"     codiceMateriale as string,",
				"     quantita as integer,",
				"     prezzoUnitario as double,",
				"     imponibile as double)[]))[],",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"parse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          numero as integer,",
				"          dataFattura as string,",
				"          prodotto as string,",
				"          identificativo as string,",
				"          tipologiaFattura as string,",
				"          istitutioID as string,",
				"          onboardingTokenID as string,",
				"          tipoDocumento as string,",
				"          divisa as string,",
				"          metodoPagamento as string,",
				"          causale as string,",
				"          split as boolean,",
				"          sollecito as string,",
				"          datiGeneraliDocumento as (tipologia as string, riferimentoNumeroLinea as integer, idDocumento as string, data as string, numItem as string, codiceCommessaConvenzione as string, CUP as string, CIG as string)[],",
				"          posizioni as (numerolinea as integer, testo as string, codiceMateriale as string, quantita as integer, prezzoUnitario as double, imponibile as double)[]",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          listaFatture = listaFatture",
				"     )) ~> sink1"
			]
		}
	}
}