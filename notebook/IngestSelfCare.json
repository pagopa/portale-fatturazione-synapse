{
	"name": "IngestSelfCare",
	"properties": {
		"folder": {
			"name": "Ingestion"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkcls01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f72e91bc-e583-4589-aea5-91626bb764a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5c587d75-fb91-4559-bda2-8612949a2b7d/resourceGroups/fat-d-analytics-rg/providers/Microsoft.Synapse/workspaces/fat-d-synw/bigDataPools/sparkcls01",
				"name": "sparkcls01",
				"type": "Spark",
				"endpoint": "https://fat-d-synw.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkcls01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"#Variables\r\n",
					"tableNameEnti = 'fat_delta.enti'\r\n",
					"tableNameContratti = 'fat_delta.contratti'\r\n",
					"linked_service_name = 'nomeLinkedService'\r\n",
					"#sourcefile = 'abfss://raw@fatddls.dfs.core.windows.net/send/2023/11/08/selfcare_contract/selfcare_contract_20231108.parquet'\r\n",
					"sourcefile = 'abfss://raw@fatddls.dfs.core.windows.net/send/TEST/part-00000-668a5a56-4584-4f99-afe9-c046b0049a90-c000.snappy.parquet'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import max , row_number, col\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load delta tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tDeltaEnti = DeltaTable.forName(spark, tableNameEnti)\r\n",
					"tDeltaContratti = DeltaTable.forName(spark, tableNameContratti)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load and process source file"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfNewFile = spark.read.format(\"parquet\").load(sourcefile)\r\n",
					"#nel file sono presenti duplicati per internalistitutionid con stato diverso e diversa data di creazione\r\n",
					"#applico un filtro per prendere solo l'attivo pi√π recente\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"dfTmp = dfNewFile.filter(\"state = 'ACTIVE'\")\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"#dfAgg = dfTmp.groupBy(\"internalistitutionid\", \"product\").agg(max(\"updatedat\").alias(\"max_date\"))\r\n",
					"\r\n",
					"#dfTmp = dfTmp.join(dfAgg,(dfTmp[\"internalistitutionid\"]==dfAgg[\"internalistitutionid\"]) & (dfTmp[\"createdat\"]== dfAgg[\"max_date\"]) & (dfTmp[\"product\"] == dfAgg[\"product\"]))\r\n",
					"#dfTmp = dfTmp.drop(dfAgg[\"internalistitutionid\"]).drop(dfAgg[\"max_date\"]).drop(dfAgg[\"product\"])\r\n",
					"#print(dtTmp.count())\r\n",
					"\r\n",
					"\r\n",
					"# Define the window specification\r\n",
					"windowSpec = Window.partitionBy(\"internalistitutionid\").orderBy(col(\"updatedat\").desc())\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"dfEnti = dfTmp.withColumn(\"_rank\", row_number().over(windowSpec)) \\\r\n",
					"    .filter(col(\"_rank\") == 1)\\\r\n",
					"    .select(\"internalistitutionid\",\"institution.institutionType\",\"institution.description\", \"institution.digitalAddress\", \"institution.address\", \"institution.originId\", \"institution.zipCode\", \"institution.istatCode\", \"institution.city\", \"institution.country\", \"institution.county\", \"institution.subUnitCode\", \"institution.subUnitType\", \"institution.paymentServiceProvider\", \"billing.vatnumber\", \"billing.publicservices\", \"institution.Category\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"dfContratti = dfTmp.withColumn(\"_rank\", row_number().over(windowSpec)) \\\r\n",
					"    .filter(col(\"_rank\") == 1) \\\r\n",
					"    .select(\"internalistitutionid\", \"product\", \"filename\", \"onboardingtokenid\", \"pricingplan\", \"updatedat\", \"createdat\", \"closedat\", \"year\", \"month\", \"daily\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Add timestamp to dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#actualTimeStamp = F.current_timestamp()\r\n",
					"#dfEnti = dfEnti.withColumn(\"LastModified\", actualTimeStamp)\r\n",
					"#dfContratti = dfContratti.withColumn(\"LastModified\", actualTimeStamp)\r\n",
					"actualTimeStamp = datetime.now()\r\n",
					"dfEnti = dfEnti.withColumn(\"LastModified\",  F.lit(actualTimeStamp))\r\n",
					"dfContratti = dfContratti.withColumn(\"LastModified\",  F.lit(actualTimeStamp))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write to delta db"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mergedDfEnti = tDeltaEnti.alias(\"target\").merge(\r\n",
					"    dfEnti.alias(\"source\"),\r\n",
					"    \"target.internalistitutionid = source.internalistitutionid\"\r\n",
					").whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()\r\n",
					"\r\n",
					"mergedDfContratti = tDeltaContratti.alias(\"target\").merge(\r\n",
					"    dfContratti.alias(\"source\"),\r\n",
					"    \"target.internalistitutionid = source.internalistitutionid AND target.product = source.product\"\r\n",
					").whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update watermark table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"watermarkTable =  DeltaTable.forName(spark, \"fat_delta.watermark\")\r\n",
					"\r\n",
					"#watermarkTable.update(\"TableName = 'enti'\", {\"LastModified\": actualTimeStamp})\r\n",
					"#watermarkTable.update(\"TableName = 'contratti'\", {\"LastModified\": actualTimeStamp})\r\n",
					"\r\n",
					"watermarkTable.update(\"TableName = 'enti'\", {\"LastModified\": F.lit(actualTimeStamp)})\r\n",
					"watermarkTable.update(\"TableName = 'contratti'\", {\"LastModified\": F.lit(actualTimeStamp)})"
				],
				"execution_count": null
			}
		]
	}
}