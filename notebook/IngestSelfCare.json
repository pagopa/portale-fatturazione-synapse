{
	"name": "IngestSelfCare",
	"properties": {
		"folder": {
			"name": "Ingestion"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e05188fb-be0d-4229-957a-41171d80e162"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Variables\r\n",
					"tableNameEnti = 'enti'\r\n",
					"tableNameContratti = 'contratti'\r\n",
					"linked_service_name = 'nomeLinkedService'\r\n",
					"container_name = 'cartella'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import max"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load delta tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tDeltaEnti = DeltaTable.forName(spark, tableNameEnti)\r\n",
					"tDeltaContratti = DeltaTable.forName(spark, tableNameContratti)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load and process source file"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfNewFile = spark.read.format(\"parquet\").load('abfss://rawparquet@dlsaliper.dfs.core.windows.net/selfcarecontract/selfcare_contracts.snappy.parquet')\r\n",
					"#nel file sono presenti duplicati per internalistitutionid con stato diverso e diversa data di creazione\r\n",
					"#applico un filtro per prendere solo l'attivo pi√π recente\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"dfTmp = dfNewFile.filter(\"state = 'ACTIVE'\")\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"dfAgg = dtTmp.groupBy(\"internalistitutionid\", \"product\").agg(max(\"updatedat\").alias(\"max_date\"))\r\n",
					"\r\n",
					"dfTmp = dfTmp.join(dfAgg,(dfTmp[\"internalistitutionid\"]==dfAgg[\"internalistitutionid\"]) & (dfTmp[\"createdat\"]== dfAgg[\"max_date\"]) & (dfTmp[\"product\"] == dfAgg[\"product\"]))\r\n",
					"dfTmp = dfTmp.drop(dfAgg[\"internalistitutionid\"]).drop(dfAgg[\"max_date\"]).drop(dfAgg[\"product\"])\r\n",
					"#print(dtTmp.count())\r\n",
					"\r\n",
					"\r\n",
					"dfEnti = dfTmp.select(\"description\", \"institution.digitalAddress\", \"institution.address\", \"institution.originId\", \"institution.zipCode\", \"institution.istatCode\", \"institution.city\", \"institution.country\", \"institution.county\", \"institution.subUnitCode\", \"institution.subUnitType\", \"institution.paymentServiceProvider\", \"billing.vatnumber\", \"billing.publicservices\", \"LastModified\")\r\n",
					"dfContratti = dfTmp.select(\"internalistitutionid\", \"product\", \"filename\", \"onboardingtokenid\", \"pricinplan\", \"updatedat\", \"createdat\", \"closedat\", \"year\", \"month\", \"daily\", \"LastModified\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Add timestamp to dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"actualTimeStamp = F.current_timestamp()\r\n",
					"dfEnti = dfEnti.withColumn(\"LastModified\", actualTimeStamp)\r\n",
					"dfContratti = dfContratti.withColumn(\"LastModified\", actualTimeStamp)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write to delta db"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mergedDfEnti = tDeltaEnti.alias(\"target\").merge(\r\n",
					"    dfEnti.alias(\"source\"),\r\n",
					"    \"target.internalistitutionid = source.internalistitutionid\"\r\n",
					").whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()\r\n",
					"\r\n",
					"mergedDfContratti = tDeltaContratti.alias(\"target\").merge(\r\n",
					"    dfContratti.alias(\"source\"),\r\n",
					"    \"target.internalistitutionid = source.internalistitutionid & target.product = source.product\"\r\n",
					").whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update watermark table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}