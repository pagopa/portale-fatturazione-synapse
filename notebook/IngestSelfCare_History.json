{
	"name": "IngestSelfCare_History",
	"properties": {
		"folder": {
			"name": "Ingestion"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkcls01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4b088efd-577f-4cb5-9bae-88bcd8d6e224"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5c587d75-fb91-4559-bda2-8612949a2b7d/resourceGroups/fat-d-analytics-rg/providers/Microsoft.Synapse/workspaces/fat-d-synw/bigDataPools/sparkcls01",
				"name": "sparkcls01",
				"type": "Spark",
				"endpoint": "https://fat-d-synw.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkcls01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"#Variables\r\n",
					"tableNameEnti = 'fat_delta.enti_history'\r\n",
					"tableNameContratti = 'fat_delta.contratti_history'\r\n",
					"linked_service_name = 'nomeLinkedService'\r\n",
					"#sourcefile = 'abfss://raw@fatddls.dfs.core.windows.net/send/2023/11/08/selfcare_contract/selfcare_contract_20231108.parquet'\r\n",
					"#sourcefile = 'abfss://raw@fatddls.dfs.core.windows.net/send/2023/12/05/selfcare_contract/part-00000-aafb0b82-5c53-4b19-b719-49f1be9fc620-c000.snappy.parquet'"
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import max\r\n",
					"from datetime import datetime"
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load delta tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#tDeltaEnti = DeltaTable.forName(spark, tableNameEnti)\r\n",
					"#tDeltaContratti = DeltaTable.forName(spark, tableNameContratti)"
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load and process source file"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfNewFile = spark.read.format(\"parquet\").load(sourcefile)\r\n",
					"#nel file sono presenti duplicati per internalistitutionid con stato diverso e diversa data di creazione\r\n",
					"#applico un filtro per prendere solo l'attivo piÃ¹ recente\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"dfTmp = dfNewFile.filter(\"state = 'ACTIVE'\")\r\n",
					"\r\n",
					"#print(dtTmp.count())\r\n",
					"dfAgg = dfTmp.groupBy(\"internalistitutionid\", \"product\").agg(max(\"updatedat\").alias(\"max_date\"))\r\n",
					"\r\n",
					"dfTmp = dfTmp.join(dfAgg,(dfTmp[\"internalistitutionid\"]==dfAgg[\"internalistitutionid\"]) & (dfTmp[\"createdat\"]== dfAgg[\"max_date\"]) & (dfTmp[\"product\"] == dfAgg[\"product\"]))\r\n",
					"dfTmp = dfTmp.drop(dfAgg[\"internalistitutionid\"]).drop(dfAgg[\"max_date\"]).drop(dfAgg[\"product\"])\r\n",
					"#print(dtTmp.count())\r\n",
					"\r\n",
					"\r\n",
					"dfEnti = dfTmp.select(\"internalistitutionid\",\"institution.institutionType\",\"institution.description\", \"institution.digitalAddress\", \"institution.address\", \"institution.originId\", \"institution.zipCode\", \"institution.istatCode\", \"institution.city\", \"institution.country\", \"institution.county\", \"institution.subUnitCode\", \"institution.subUnitType\", \"institution.paymentServiceProvider.*\", \"billing.vatnumber\", \"billing.publicservices\", \"institution.Category\")\r\n",
					"dfContratti = dfTmp.select(\"internalistitutionid\", \"product\", \"filename\", \"onboardingtokenid\", \"pricingplan\", \"updatedat\", \"createdat\", \"closedat\", \"year\", \"month\", \"daily\")"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#DEBUG\r\n",
					"\r\n",
					"# dfEnti.printSchema()\r\n",
					"# dfContratti.printSchema()\r\n",
					"# dfEnti2 = dfEnti.select(\"internalistitutionid\",\"institutionType\")\r\n",
					"# dfEnti2.printSchema()\r\n",
					"# dfEnti3 = dfEnti.select(\"internalistitutionid\",\"institutionType\",\"paymentServiceProvider.*\")\r\n",
					"# dfEnti3.printSchema()\r\n",
					"\r\n",
					"\r\n",
					"#dfEnti4 = dfTmp.select(\"internalistitutionid\",\"institution.institutionType\",\"institution.description\", \"institution.digitalAddress\", \"institution.address\", \"institution.originId\", \"institution.zipCode\", \"institution.istatCode\", \"institution.city\", \"institution.country\", \"institution.county\", \"institution.subUnitCode\", \"institution.subUnitType\", \"institution.paymentServiceProvider.*\", \"billing.vatnumber\", \"billing.publicservices\", \"institution.Category\")\r\n",
					"#dfEnti4.printSchema()\r\n",
					"\r\n",
					"#my_schema = dfEnti.schema()\r\n",
					"#columns = Arrays.stream(my_schema.fields()).map(field -> field.name()+\" \"+field.dataType().typeName()).collect(Collectors.joining(\",\"))\r\n",
					"\r\n",
					"#print(dfEnti.schema())\r\n",
					"#print(columns)"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Add timestamp to dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#actualTimeStamp = F.current_timestamp()\r\n",
					"#dfEnti = dfEnti.withColumn(\"LastModified\", actualTimeStamp)\r\n",
					"#dfContratti = dfContratti.withColumn(\"LastModified\", actualTimeStamp)\r\n",
					"actualTimeStamp = datetime.now()\r\n",
					"dfEnti = dfEnti.withColumn(\"insertionTimestamp\",  F.lit(actualTimeStamp))\r\n",
					"dfContratti = dfContratti.withColumn(\"insertionTimestamp\",  F.lit(actualTimeStamp))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"dfEnti = dfEnti.withColumn(\"SourceFile\",  F.lit(sourcefile))\r\n",
					"dfContratti = dfContratti.withColumn(\"SourceFile\",  F.lit(sourcefile))"
				],
				"execution_count": 71
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write to delta db"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Creazione tabella Contratti_history\r\n",
					"#spark.sql('DROP TABLE IF EXISTS  fat_delta.contratti_history')\r\n",
					"#spark.sql('DROP TABLE IF EXISTS  fat_delta.enti_history')\r\n",
					"#spark.read.table(\"fat_delta.enti_history\")"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfEnti.write.format(\"delta\").mode(\"append\").saveAsTable(tableNameEnti)\r\n",
					"dfContratti.write.format(\"delta\").mode(\"append\").saveAsTable(tableNameContratti)"
				],
				"execution_count": 74
			}
		]
	}
}