{
	"name": "CreateJsonForSap",
	"properties": {
		"folder": {
			"name": "Utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkcls01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "89e5689c-d5fa-42f6-8eb3-9e2844d6bab5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5c587d75-fb91-4559-bda2-8612949a2b7d/resourceGroups/fat-d-analytics-rg/providers/Microsoft.Synapse/workspaces/fat-d-synw/bigDataPools/sparkcls01",
				"name": "sparkcls01",
				"type": "Spark",
				"endpoint": "https://fat-d-synw.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkcls01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"annoRiferimento = 2024\r\n",
					"meseRiferimento = 1\r\n",
					"storageAccountUrl = \"https://fatddls.blob.core.windows.net\"\r\n",
					"linkedServiceName = \"fat_sa\"\r\n",
					"container_name = \"pfstage\"\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\r\n",
					"from azure.identity import DefaultAzureCredential\r\n",
					"\r\n",
					"#from mssparkutils.credential import Credential"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get adls account name\r\n",
					"raw_adls_container_name = mssparkutils.credentials.getFullConnectionString(linkedServiceName)\r\n",
					"#print(raw_adls_container_name)\r\n",
					"\r\n",
					"adls_account_name = raw_adls_container_name.split('url=https://')[1].split('/;token')[0]\r\n",
					"#print(adls_account_name)\r\n",
					"\r\n",
					"# Set configuration (SAS Token)\r\n",
					"adls_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s' % (container_name, adls_account_name), adls_sas_token)\r\n",
					"#print(adls_sas_token)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"credential = DefaultAzureCredential()\r\n",
					"blob_service_client = BlobServiceClient(account_url=storageAccountUrl,credential=credential)\r\n",
					"for container in blob_service_client.list_containers():\r\n",
					"    print(container.name)\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creazione dell'oggetto Credential\r\n",
					"credential = mssparkutils.credentials()\r\n",
					"\r\n",
					"# Configurazione dell'accesso allo storage account\r\n",
					"configs = {\r\n",
					"  \"fs.azure.account.auth.type\": \"OAuth\",\r\n",
					"  \"fs.azure.account.oauth.provider.type\": \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\",\r\n",
					"  \"fs.azure.account.oauth2.client.id\": credential.client_id,\r\n",
					"  \"fs.azure.account.oauth2.client.secret\": credential.client_secret,\r\n",
					"  \"fs.azure.account.oauth2.client.endpoint\": \"https://login.microsoftonline.com/{}/oauth2/token\".format(credential.tenant_id)\r\n",
					"}\r\n",
					"\r\n",
					"# Creazione del BlobServiceClient\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"blob_service_client = BlobServiceClient(account_url=\"https://fatdstagesa.blob.core.windows.net\", credential=None, **configs)\r\n",
					"\r\n",
					"# Lettura dei dati dallo storage account\r\n",
					"container_client = blob_service_client.get_container_client(container_name)\r\n",
					"for container in blob_service_client.list_containers():\r\n",
					"    print(container.name)"
				],
				"execution_count": 15
			}
		]
	}
}